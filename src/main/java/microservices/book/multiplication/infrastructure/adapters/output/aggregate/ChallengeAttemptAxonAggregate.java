package microservices.book.multiplication.infrastructure.adapters.output.aggregate;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import microservices.book.multiplication.application.ports.input.command.CreateChallengeCommand;
import microservices.book.multiplication.application.ports.output.event.ChallengeAttemptCreatedEvent;
import microservices.book.multiplication.domain.model.User;
import org.axonframework.commandhandling.CommandHandler;
import org.axonframework.eventsourcing.EventSourcingHandler;
import org.axonframework.modelling.command.AggregateIdentifier;
import org.axonframework.modelling.command.AggregateLifecycle;
import org.axonframework.spring.stereotype.Aggregate;

/**
 * The @Aggregate annotation informs Axon's auto configurer for spring that this class is an Aggregate instance.
 *
 * The @AggregateIdentifier identifies the field as the identifier of the Aggregate.
 *
 * The @CommandHandler annotation will mark a method as a Handler of an specific Command.
 */
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Aggregate
public class ChallengeAttemptAxonAggregate {
    @AggregateIdentifier
    private Long id;
    private User user;
    private int factorA;
    private int factorB;
    private int resultAttempt;
    private int guess;
    private boolean correct;

    /**
     * The AggregateLifeCycle component is used to notify the Aggregate that a
     * new entity was created by publishing the ChallengeAttemptCreatedEvent.
     * @param command
     */
    @CommandHandler
    public ChallengeAttemptAxonAggregate(CreateChallengeCommand command) {
        /**
         * boolean isCorrect = createChallengeAttemptCommand.challengeAttemptRequest().getGuess() ==
         *                 createChallengeAttemptCommand.challengeAttemptRequest().getFactorA() * createChallengeAttemptCommand.challengeAttemptRequest().getFactorB();
         */
        boolean correct = command.getGuess() == command.getFactorA() * command.getFactorB();
        AggregateLifecycle.apply(
                new ChallengeAttemptCreatedEvent(
                        command.getAggregateId(),
                        command.getUser(),
                        command.getFactorA(),
                        command.getFactorB(),
                        command.getFactorA() * command.getFactorB(),
                        command.getGuess(),
                        correct
                )
        );
    }

    /**
     * The @EventSourcingHandler will define the annotated method as a handler for Events generated by that Aggregate.
     * @param event
     */
    @EventSourcingHandler
    public void on(ChallengeAttemptCreatedEvent event) {
        this.id = event.getId();
        this.user = event.getUser();
        this.factorA = event.getFactorA();
        this.factorB = event.getFactorB();
        this.resultAttempt = event.getResultAttempt();
        this.guess = event.getUserGuess();
        this.correct = event.isCorrect();
    }
}
