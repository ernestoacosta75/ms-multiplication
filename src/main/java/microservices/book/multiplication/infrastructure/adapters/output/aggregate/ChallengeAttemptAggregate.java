package microservices.book.multiplication.infrastructure.adapters.output.aggregate;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import microservices.book.multiplication.application.ports.input.command.CreateChallengeAttemptCommand;
import microservices.book.multiplication.domain.event.ChallengeAttemptCreatedEvent;
import microservices.book.multiplication.domain.model.Challenge;
import microservices.book.multiplication.domain.model.User;
import org.axonframework.commandhandling.CommandHandler;
import org.axonframework.eventsourcing.EventSourcingHandler;
import org.axonframework.modelling.command.AggregateIdentifier;
import org.axonframework.modelling.command.AggregateLifecycle;
import org.axonframework.spring.stereotype.Aggregate;

/**
 * The @Aggregate annotation informs Axon's auto configurer for spring that this class is an Aggregate instance.
 * The @AggregateIdentifier identifies the field as the identifier of the Aggregate.
 */
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Aggregate
public class ChallengeAttemptAggregate {
    @AggregateIdentifier
    private Long id;
    private User user;
    private Challenge challenge;
    private int resultAttempt;
    private boolean correct;

    /**
     * The AggregateLifeCycle component is used to notify the Aggregate that a
     * new entity was created by publishing the ChallengeAttemptCreatedEvent.
     * @param command
     */
    @CommandHandler
    public ChallengeAttemptAggregate(CreateChallengeAttemptCommand command) {
        AggregateLifecycle.apply(
                new ChallengeAttemptCreatedEvent(
                        command.getAggregateId(),
                        command.getUser(),
                        command.getChallenge(),
                        command.getResultAttempt(),
                        command.isCorrect()
                )
        );
    }

    /**
     * The @EventSourcingHandler will define the annotated method as a handler for Events generated by that Aggregate.
     * @param event
     */
    @EventSourcingHandler
    public void on(ChallengeAttemptCreatedEvent event) {
        this.id = event.getId();
        this.user = event.getUser();
        this.challenge = event.getChallenge();
        this.resultAttempt = event.getResultAttempt();
        this.correct = event.isCorrect();
    }
}
